///////////////////////////////////////////////////////////
//  OpaqueExpression.cs
//  Implementation of the Class OpaqueExpression
//  Generated by Enterprise Architect
//  Created on:      20-Mar-2019 11:19:27
//  Original author: Iva
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



//using UML.CommonBehavior; // TODO
//using UML.Classification; // TODO
using UML.Values;
namespace UML.Values
{
    /// <summary>
    /// An OpaqueExpression is a ValueSpecification that specifies the computation
    /// of a collection of values either in terms of a UML Behavior or based on 
    /// a textual statement in a language other than UML
    /// </summary>
    public class OpaqueExpression : ValueSpecification
    {

        /// <summary>
        /// A textual definition of the behavior of the OpaqueExpression, possibly in multiple languages.
        /// </summary>
        public string body;
        /// <summary>
        /// Specifies the languages used to express the textual bodies of the OpaqueExpression.
        /// Languages are matched to body Strings by order.The interpretation of the body 
        /// depends on the languages. If the languages are unspecified, they may be implicit 
        /// from the expression body or the context.
        /// </summary>
        public string language;
        /// <summary>
        /// Specifies the behavior of the OpaqueExpression as a UML Behavior.
        /// </summary>
        //public UML.CommonBehavior.Behavior behavior; // TODO
        /// <summary>
        /// If an OpaqueExpression is specified using a UML Behavior, then this refers to 
        /// the single required return Parameter of that Behavior.When the Behavior completes 
        /// execution, the values on this Parameter give the result of evaluating the OpaqueExpression.
        /// </summary>
        //public UML.Classification.Parameter result; // TODO
        
        /// <summary>
        /// The query isIntegral() tells whether an expression is intended to produce an Integer.
        /// </summary>
        /// <returns></returns>
        public bool isIntegral()
        {
            return false;   // TODO
        }
       
        /// <summary>
        /// The query isNonNegative() tells whether an integer expression has a non-negative value.
        /// </summary>
        /// <returns></returns>
        public bool isNonNegative()
        {
            return false;   // TODO
        }
        
        /// <summary>
        /// The query isPositive() tells whether an integer expression has a positive value.
        /// </summary>
        /// <returns></returns>
        public bool isPositive()
        {
            return false;   // TODO
        }
        
        /// <summary>
        /// Derivation for OpaqueExpression::/result
        /// </summary>
        /// <returns></returns>
        public /*UML.Classification.Parameter*/ void result()   // TODO
        {
            return ;   // TODO
        }
        
        /// <summary>
        /// The query value() gives an integer value for an expression intended to produce one.
        /// </summary>
        /// <returns></returns>
        public int value()
        {
            return 0;   // TODO
        }


        public OpaqueExpression()
        {

        }

        ~OpaqueExpression()
        {

        }

        public override bool booleanValue()
        {
            return false;   // TODO
        }

        public override int integerValue()
        {
            return 0;   // TODO
        }

        public override double realValue()
        {
            return 0;   // TODO
        }

        public override string stringValue()
        {
            return body;    // TODO
        }

        public override string XmiType() { return "uml:OpaqueExpression"; }

    }//end OpaqueExpression

}//end namespace CommonStructure