///////////////////////////////////////////////////////////
//  Message.cs
//  Implementation of the Class Message
//  Generated by Enterprise Architect
//  Created on:      04-Oct-2018 16:51:33
//  Original author: Iva
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using UML.Interactions;
using UML.CommonStructure;
//using UML.Values; // TODO
//using UML.StructuredClassifiers; // TODO
namespace UML.Interactions {
    /// <summary>
    /// A Message defines a particular communication between Lifelines of an
    /// Interaction.
    /// </summary>
    public class Message : Element /*: NamedElement*/ { //TODO

        /// <summary>
        /// The derived kind of the Message (complete, lost, found, or unknown).
        /// </summary>
        public readonly MessageKind messageKind_; //TODO
        /// <summary>
        /// The sort of communication reflected by the Message.
        /// </summary>
        public MessageSort messageSort;
        /// <summary>
        /// References the Receiving of the Message.
        /// </summary>
        //public UML.Interactions.MessageEnd receiveEvent;
        public UML.Interactions.OccurrenceSpecification receiveEvent; //TODO
        /// <summary>
        /// References the Sending of the Message.
        /// </summary>
        //public UML.Interactions.MessageEnd sendEvent;
        public UML.Interactions.OccurrenceSpecification sendEvent; //TODO
        /// <summary>
        /// The arguments of the Message.
        /// </summary>
        //public readonly LinkedList<UML.Values.ValueSpecification> argument = new LinkedList<>(UML.Value.ValueSpecification); // TODO
        /// <summary>
        /// The Connector on which this Message is sent.
        /// </summary>
        //public UML.StructuredClassifiers.Connector connector; // TODO
        /// <summary>
        /// The signature of the Message is the specification of its content. It refers
        /// either an Operation or a Signal.
        /// </summary>
        //public UML.CommonStructure.NamedElement signature; //TODO
        /// <summary>
		/// The enclosing Interaction owning the Message.
		/// </summary>
        public UML.Interactions.Interaction interaction;

		public Message(){

		}

		~Message(){

		}

		/// <summary>
		/// The query isDistinguishableFrom() specifies that any two Messages may coexist
		/// in the same Namespace, regardless of their names.
		/// </summary>
		/// <param name="result"></param>
		/// <param name="n"></param>
		/// <param name="ns"></param>
		public bool isDistinguishableFrom(/*NamedElement n, Namespace ns*/){
            return true;     // TODO
		}

		/// <summary>
		/// This query returns the MessageKind value for this Message.
		/// </summary>
		/// <param name="result"></param>
		public MessageKind messageKind(){
			return messageKind_; //TODO
		}

        public override string XmiType() { return "uml:Message"; }

    }//end Message

}//end namespace Interactions