///////////////////////////////////////////////////////////
//  Gate.cs
//  Implementation of the Class Gate
//  Generated by Enterprise Architect
//  Created on:      04-Oct-2018 16:51:31
//  Original author: Iva
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using UML.Interactions;
using UML.CommonStructure;
namespace UML.Interactions {
	/// <summary>
	/// A Gate is a MessageEnd which serves as a connection point for relating a
	/// Message which has a MessageEnd (sendEvent / receiveEvent) outside an
	/// InteractionFragment with another Message which has a MessageEnd (receiveEvent /
	/// sendEvent)  inside that InteractionFragment.
	/// </summary>
	public class Gate : MessageEnd {

		public Gate(){

		}

		~Gate(){

		}

		/// <summary>
		/// This query returns the name of the gate, either the explicit name (.name) or
		/// the constructed name ('out_" or 'in_' concatenated in front of .message.name)
		/// if the explicit name is not present.
		/// </summary>
		/// <param name="result"></param>
		public string getName(){
            return ""; // TODO
        }

        /// <summary>
        /// If the Gate is an inside Combined Fragment Gate, this operation returns the
        /// InteractionOperand that the opposite end of this Gate is included within.
        /// </summary>
        /// <param name="result"></param>
        public InteractionOperand getOperand(){

			return null; // TODO
		}

		/// <summary>
		/// This query returns true value if this Gate is an actualGate of an
		/// InteractionUse.
		/// </summary>
		/// <param name="result"></param>
		public bool isActual(){
            return true; // TODO
        }

		/// <summary>
		/// The query isDistinguishableFrom() specifies that two Gates may coexist in the
		/// same Namespace, without an explicit name property. The association end
		/// formalGate subsets ownedElement, and since the Gate name attribute
		/// is optional, it is allowed to have two formal gates without an explicit name,
		/// but having derived names which are distinct.
		/// </summary>
		/// <param name="result"></param>
		/// <param name="n"></param>
		/// <param name="ns"></param>
		public bool isDistinguishableFrom(/*NamedElement n, Namespace ns*/){ // TODO
            return true; // TODO
        }

		/// <summary>
		/// This query returns true if this Gate is a formalGate of an Interaction.
		/// </summary>
		/// <param name="result"></param>
		public bool isFormal(){
            return true; // TODO
        }

		/// <summary>
		/// This query returns true if this Gate is attached to the boundary of a
		/// CombinedFragment, and its other end (if present) is inside of an
		/// InteractionOperator of the same CombinedFragment.
		/// </summary>
		/// <param name="result"></param>
		public bool isInsideCF(){
            return true; // TODO
        }

		/// <summary>
		/// This query returns true if this Gate is attached to the boundary of a
		/// CombinedFragment, and its other end (if present)  is outside of the same
		/// CombinedFragment.
		/// </summary>
		/// <param name="result"></param>
		public bool isOutsideCF(){
            return true; // TODO
        }

		/// <summary>
		/// This query returns true if the name of this Gate matches the name of the in
		/// parameter Gate, and the messages for the two Gates correspond. The Message for
		/// one Gate (say A) corresponds to the Message for another Gate (say B) if (A and
		/// B have the same name value) and (if A is a sendEvent then B is a receiveEvent)
		/// and (if A is a receiveEvent then B is a sendEvent) and (A and B have the same
		/// messageSort value) and (A and B have the same signature value).
		/// </summary>
		/// <param name="result"></param>
		/// <param name="gateToMatch"></param>
		public bool matches(Gate gateToMatch){
            return true; // TODO
        }

	}//end Gate

}//end namespace Interactions